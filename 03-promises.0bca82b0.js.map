{"mappings":"oeAAAA,EAAA,SAEAC,QAAUC,SAASC,cAAc,SAEjC,IAAIC,EAAiB,EACjBC,EAAa,EACbC,EAAiB,EACjBC,EAAkB,EA2CtBN,QAAQO,iBAAiB,UAzCzB,SAAsBC,GACpBA,EAAEC,iBACF,MAAMC,MAAEA,EAAKC,KAAEA,EAAIC,OAAEA,GAAWZ,QAAQa,SAExCP,EAAkBM,EAAOE,MACzBV,EAAaM,EAAMI,MACnBT,EAAiBM,EAAKG,MAQxB,SAAuBC,EAAUL,GAC/B,MAAMM,EAAgBC,KAAKC,SAAW,GAEhCC,EAAU,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACLP,EACFK,EAAQ,uBAAqBN,QAAiBL,OAE5CY,EAAK,sBAAoBP,QAAeL,MAAU,GAErDA,EAAM,IAGX,GAAIP,EAAiBG,EAEnB,YADAkB,QAAQC,IAAI,uBAIdN,EACGO,MAAKC,IACJH,QAAQC,IAAIE,EAAO,IAEpBC,OAAMC,IACLL,QAAQC,IAAII,EAAM,G,CA7BtBC,CAAc3B,EAAgBC,GAE9BD,GAAkB,EAClBC,GAAcC,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nformRef = document.querySelector('.form');\n\nlet promiseCounter = 0;\nlet delayValue = 0;\nlet stepDelayValue = 0;\nlet maxCounterValue = 0;\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  const { delay, step, amount } = formRef.elements;\n\n  maxCounterValue = amount.value;\n  delayValue = delay.value;\n  stepDelayValue = step.value;\n\n  createPromise(promiseCounter, delayValue);\n\n  promiseCounter += 1;\n  delayValue += stepDelayValue;\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n\n  if (promiseCounter > maxCounterValue) {\n    console.log(\"don't make promises\");\n    return;\n  }\n\n  promise\n    .then(result => {\n      console.log(result);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n}\n\nformRef.addEventListener('submit', onFormSubmit);\n\n// createPromise(2, 500);\n"],"names":["parcelRequire","formRef","document","querySelector","$47d4ff9957288465$var$promiseCounter","$47d4ff9957288465$var$delayValue","$47d4ff9957288465$var$stepDelayValue","$47d4ff9957288465$var$maxCounterValue","addEventListener","e","preventDefault","delay","step","amount","elements","value","position","shouldResolve","Math","random","promise","Promise","resolve","reject","setTimeout","console","log","then","result","catch","error","$47d4ff9957288465$var$createPromise"],"version":3,"file":"03-promises.0bca82b0.js.map"}