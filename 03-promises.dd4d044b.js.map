{"mappings":"gfAAAA,EAAA,SAEAC,QAAUC,SAASC,cAAc,SAEjC,IAAIC,EAAiB,EACjBC,EAAa,EACbC,EAAiB,EACjBC,EAAkB,EA2CtBN,QAAQO,iBAAiB,UAzCzB,SAAsBC,GACpBA,EAAEC,iBACF,IAAgCC,EAAAV,QAAQW,SAAhCC,EAAwBF,EAAxBE,MAAOC,EAAiBH,EAAjBG,KAAMC,EAAWJ,EAAXI,OAErBR,EAAkBQ,EAAOC,MACzBX,EAAaQ,EAAMG,MACnBV,EAAiBQ,EAAKE,MAQxB,SAAuBC,EAAUJ,GAC/B,IAAMK,EAAgBC,KAAKC,SAAW,GAEhCC,EAAU,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLP,EACFK,EAAQ,uBAAwCG,OAAfT,EAAS,QAAYS,OAANb,EAAM,OAEpDW,EAAK,sBAAqCE,OAAfT,EAAS,QAAYS,OAANb,EAAM,M,GAEnDA,E,IAGL,GAAIT,EAAiBG,EAEnB,YADAoB,QAAQC,IAAI,uBAIdP,EACGQ,MAAK,SAAAC,GACJH,QAAQC,IAAIE,E,IAEbC,OAAM,SAAAC,GACLL,QAAQC,IAAII,E,IA7BhBC,CAAc7B,EAAgBC,GAE9BD,GAAkB,EAClBC,GAAcC,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nformRef = document.querySelector('.form');\n\nlet promiseCounter = 0;\nlet delayValue = 0;\nlet stepDelayValue = 0;\nlet maxCounterValue = 0;\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  const { delay, step, amount } = formRef.elements;\n\n  maxCounterValue = amount.value;\n  delayValue = delay.value;\n  stepDelayValue = step.value;\n\n  createPromise(promiseCounter, delayValue);\n\n  promiseCounter += 1;\n  delayValue += stepDelayValue;\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n\n  if (promiseCounter > maxCounterValue) {\n    console.log(\"don't make promises\");\n    return;\n  }\n\n  promise\n    .then(result => {\n      console.log(result);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n}\n\nformRef.addEventListener('submit', onFormSubmit);\n\n// createPromise(2, 500);\n"],"names":["parcelRequire","formRef","document","querySelector","$ce04d3a99e08e73b$var$promiseCounter","$ce04d3a99e08e73b$var$delayValue","$ce04d3a99e08e73b$var$stepDelayValue","$ce04d3a99e08e73b$var$maxCounterValue","addEventListener","e","preventDefault","_elements","elements","delay","step","amount","value","position","shouldResolve","Math","random","promise","Promise","resolve","reject","setTimeout","concat","console","log","then","result","catch","error","$ce04d3a99e08e73b$var$createPromise"],"version":3,"file":"03-promises.dd4d044b.js.map"}